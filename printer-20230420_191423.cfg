[include ercf_parameters.cfg]
[include ercf_software.cfg]
[include client_macros.cfg]
  # This file contains common pin mappings for the BigTreeTech OctoPus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position				[gcode_macro G32] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Probe pin								[probe] section
## Fine tune E steps					[extruder] section
[include mainsail.cfg]
[include lcd_tweak.cfg]
[include nozzle_scrub.cfg]
[include pid_macro.cfg]
[include bedfans.cfg]
[include macro.cfg]
[include klicky-probe.cfg]
#[include autoz.cfg]
[include frame_compensation.cfg]
[include Adaptive_Mesh.cfg]
[include Adaptive_Purge.cfg]
[include ercf_hardware.cfg]

[save_variables]
filename: ~/klipper_config/saved_variables.cfg

[exclude_object]
[mcu]
##	[X in MOTOR0] - B Motor
##	[Y in MOTOR1] - A Motor
##	[E in MOTOR6] - Extruder
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2C0017000250534E4E313120-if00
#restart_method: command
##--------------------------------------------------------------------

## Accelerometer
[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    175, 175, 10  # an example

#[input_shaper]
#shaper_freq_x: 51
#shaper_freq_y: 108.8
#shaper_type: zv

##[filament_switch_sensor my_sensor]
##pause_on_runout: false
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
##runout_gcode:
##    M600
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
##switch_pin:PG14
#   The pin on which the switch is connected. This parameter must be
#   provided.

[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z10
    G90
    G1 X175 Y0 F1500
    G91
    #G1 E-50 F1000
    G90
    #SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hetemp VALUE={printer.extruder.target}
    M104 S0
    #SET_IDLE_TIMEOUT TIMEOUT=43200
    M117 Change Filament
    RESTORE_GCODE_STATE NAME=M600_state


[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 7000  #Max 4000
#max_accel_to_decel: 10000
max_z_velocity: 15 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on MOTOR0(B Motor)
[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG6
position_min: 0
##--------------------------------------------------------------------

##	Uncomment below for 250mm build
#position_endstop: 250
#position_max: 250

##	Uncomment for 300mm build
#position_endstop: 300
#position_max: 300

##	Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

## Y Stepper on MOTOR1 (A Motor)
[stepper_y]
step_pin: PG0
dir_pin: !PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: 0
##--------------------------------------------------------------------

##	Uncomment for 250mm build
#position_endstop: 250
#position_max: 250

##	Uncomment for 300mm build
#position_endstop: 300
#position_max: 300

##	Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0
 
#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR2_1
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 0
##--------------------------------------------------------------------

##	Uncomment below for 250mm build
#position_max: 240

##	Uncomment below for 300mm build
#position_max: 290

##	Uncomment below for 350mm build
position_max: 270

##--------------------------------------------------------------------
position_min: -10
homing_speed: 5
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 30

##	Z1 Stepper - Rear Left on MOTOR3
[stepper_z1]
step_pin: PG4
dir_pin: PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 30

##	Z2 Stepper - Rear Right on MOTOR4
[stepper_z2]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: true
run_current: 0.8
hold_current: 0.80
sense_resistor: 0.110
stealthchop_threshold: 30

##	Z3 Stepper - Front Right on MOTOR5
[stepper_z3]
step_pin: PE6
dir_pin: PA14
enable_pin: !PE0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PD3
interpolate: true
run_current: 0.8
hold_current: 0.80
sense_resistor: 0.110
stealthchop_threshold: 30


#####################################################################
# 	Extruder
#####################################################################

#	E0 on MOTOR6
[extruder]
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PF4
heater_pin: PA2 # Heat0
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
step_pin: PE2
dir_pin: !PE3
enable_pin: !PD4
##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.6789511	#Bondtech 5mm Drive Gears
##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.800
filament_diameter: 1.75
max_extrude_only_distance: 250.0
max_extrude_cross_section: 50.0
##	Validate the following thermistor type to make sure it is correct


min_temp: 10
max_temp: 300
max_power: 1.0
min_extrude_temp: 170

##	Try to keep pressure_advance below 1.0
pressure_advance: 0.05
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##	E0 on MOTOR6
##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.5
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold:30


#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - BED_OUT
heater_pin: PA3
sensor_type: Generic 3950
sensor_pin: PF3
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 0.7
min_temp: 0
max_temp: 115
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

[bed_mesh]
speed: 300
horizontal_move_z: 10
##--------------------------------------------------------------------
##	Uncomment below for 250mm build
#mesh_min: 40, 40
#mesh_max: 210,210

##	Uncomment for 300mm build
#mesh_min: 40, 40
#mesh_max: 260,260

##	Uncomment for 350mm build
mesh_min: 40, 40
mesh_max: 310,310
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 7,7
algorithm: bicubic
relative_reference_index: 12


#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling

# Select the probe port by type:
## For the PROBE port; use this with the original OMRON sensor.
pin: ~PG15
## For the spare endstop port; use this with the Fotek PL-05N (or generic) inductive probe
# pin: ^PG11
## For Octopus Pro Probe port; NPN and PNP proximity switch types can be set by jumper
# pin: ^PC5

#--------------------------------------------------------------------

x_offset: 0
y_offset: 19.75
#z_offset: 6.42
speed: 5
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 6

#####################################################################
# 	Fan Control
#####################################################################

[fan]
##	Print Cooling Fan - CNC_FAN0
pin: PA8
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
##	Hotend Fan - CNC_FAN1
pin: PE5
max_power: 1.0
kick_start_time: 0.5
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan_generic controller_fan]
##	Controller fan - CNC_FAN2
pin: PD12
kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 45.0
#fan_speed: 1.0
off_below: 0.8
cycle_time: 1.0

[fan_generic exhaust_fan]
##	Exhaust fan - CNC_FAN3
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 1.5
#heater: heater_bed
#heater_temp: 50
off_below: 0.02
cycle_time: 0.00006
#hardware_pwm: true
#kick_start_time:
#off_below:

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PF5

[temperature_sensor frame]
sensor_type: Generic 3950
sensor_pin: PF6


#####################################################################
# 	LED Control
#####################################################################

#[output_pin caselight]
# Chamber Lighting - HE1 Connector (Optional)
#pin: PA3
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 18000

#[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
#home_xy_position:222,349
#speed:50
#z_hop:10
#z_hop_speed: 5

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

#--------------------------------------------------------------------
##	Gantry Corners for 250mm Build
##	Uncomment for 250mm build
#gantry_corners:
#	-60,-10
#	310, 320
##	Probe points
#points:
#	50,25
#	50,175
#	200,175
#	200,25
	
##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build
#gantry_corners:
#	-60,-10
#	360,370
##	Probe points
#points:
#	50,25
#	50,225
#	250,225
#	250,25

##	Gantry Corners for 350mm Build
##	Uncomment for 350mm build
gantry_corners:
	-60,-10
	410,420
##	Probe points
points:
	50,25
	50,275
	300,275
	300,25

#--------------------------------------------------------------------
speed: 300
horizontal_move_z: 25
retries: 10
retry_tolerance: 0.0075
max_adjust: 12

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
# 	Displays
#####################################################################

## 	Uncomment the display that you have
#--------------------------------------------------------------------

#[display]
##	RepRapDiscount 128x64 Full Graphic Smart Controller
#lcd_type: st7920
#cs_pin: EXP1_4
#sclk_pin: EXP1_5
#sid_pin: EXP1_3
#menu_timeout: 40
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2

#[output_pin beeper]
#pin: EXP1_1

#--------------------------------------------------------------------

[display]
##	mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
##	To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.05
initial_GREEN: 0
initial_BLUE: 0.05
color_order: RGB

##	Set RGB values on boot up for each Neopixel. 
##	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
 #       SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=1 INDEX=1 TRANSMIT=0
 #       SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
 #       SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------


#####################################################################
# 	Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z
    #BED_MESH_CALIBRATE
    #ADAPTIVE_BED_MESH
    G28 Z
    G0 z10 F350
    G0 X42 Y350 z10 F10000
    M109 S185
    G4 P120000
    clean_nozzle
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    #CALIBRATE_Z
    G28 Z
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    #G0 X0 Y0 Z20 F3600
    #--------------------------------------------------------------------

#Conditional G28 (home if not already homed)

[gcode_macro Pre_heat_ABS]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.02
    SET_FAN_SPEED FAN=controller_fan SPEED=1
    M106 S128
    CG28
    G90
    G0 x175 y175 z100
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110


[gcode_macro CG28]
gcode:
   {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
   G28
   {% endif %}
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}


    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}  
    CLEAR_PAUSE
    UPDATE_DELAYED_GCODE ID=CONTROL_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                       ; cancel exhaust off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0
    SET_VELOCITY_LIMIT ACCEL=7000
    SET_GCODE_OFFSET Z=0 MOVE=1
    SET_FAN_SPEED FAN=controller_fan SPEED=1
    M104 S140                                                                            ; set hotend to no-ooze temp
    M140 S{bed}
    SET_PIN PIN=daylight VALUE=0.01
    G28
    G90
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                 ; - if chamber is not at temp yet:
        SET_PIN PIN=daylight VALUE=0.00
        HEATSOAK T={bed} MOVE=1                                                          ;   heatsoak macro + park in center
        M190 S{bed}                                                                      ;   wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}           ;   wait for chamber final temp
    {% else %}                                                                           ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bed-2) %}                                ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={bed} MOVE=1                                                      ;       heatsoak and park
            M190 S{bed}                                                                  ;       wait for bed final temp
        {% else %}                                                                       ; -- and bed is already heated:
            HEATSOAK T={bed} MOVE=0                                                      ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    M106 S0
    SET_PIN PIN=daylight VALUE=0.05
    BED_MESH_CLEAR                                                                       ; clear bed mesh
    ATTACH_PROBE_LOCK                                                                    ; attach klicky + lock
    G28 Z
    QUAD_GANTRY_LEVEL
    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500  ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    #BED_MESH_CALIBRATE                                                                   ; mesh
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    BED_MESH_CALIBRATE
    G28 Z                                                                                ; home z again
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    DOCK_PROBE_UNLOCK                                                                    ; stow probe, unlock
    G0 Z10 F300
    G0 X125 Y{printer.toolhead.axis_maximum.y} F19500                                ; move to right of nozzle brush
    M109 S{hotend}                                                                       ; set & wait for hotend final temp
    CLEANNOZZLE
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    #CALIBRATE_Z                                                                          ; calibrate z offset with hot nozzle
    G28 Z
    
    # clean_nozzle
    # G0 Z10
    # G0 y175 x175
    # SET_PIN PIN=daylight VALUE=0.3
    # ADAPTIVE_PURGE
    


    #PRIME_LINE_SIMPLE
    #PRIME_LINE



   


      
    
#Parametric PRIME LINE macro.
#
# Purges a set amounf of filament, then prints a nozzle priming line at the front of the bed.
# Calculates plastic flow and line size automatically based on nozzle diameter and bed size.
#
# Most of the apects of how it does things are configurable, see the "params.SOMETHING" lines in the code below.
# Full list of accepted parameters and their default values below. All of them are optional and do not have to be specified if you don't want the values changed:
#
#  PRIME_LINE
#  PRIME_LINE XPAD=0 YPAD=0 LENGTH=150 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=1 EXTRUSION_MULTIPLIER=1.25 PRINT_HANDLE=1 HANDLE_FAN=35
#
# Careful: prints close to bed. Make sure your z-offset is correctly set and your bed mesh loaded, otherwise
# you can damage your print surface.
#
# Version 1.2
#
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE
  

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    UPDATE_DELAYED_GCODE ID=CONTROL_OFF DURATION=1800
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=600                                     ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600
    BED_MESH_CLEAR
    M107 ; turn off fan
    G1 Z5 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X250 Y300 F3600            ; park nozzle at rear
    ERCF_EJECT
    TURN_OFF_HEATERS
    SET_PIN PIN=daylight VALUE=0.00
    SET_GCODE_OFFSET Z=0
    SET_VELOCITY_LIMIT ACCEL=7000
    

[gcode_macro Load_Filament]
gcode:
      G1 E50.0 F600
      G1 E50.0 F600
      G1 E50.0 F600

[output_pin daylight]
pin: PB10
pwm: True
cycle_time: 0.01667 
#cycle_time: 0.001


[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[pause_resume]
recover_velocity: 300.0


## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 45.172
#*# pid_ki = 1.119
#*# pid_kd = 455.669
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 29.366
#*# pid_ki = 3.435
#*# pid_kd = 62.771
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 46.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 28.8
#*#
#*# [probe]
#*# z_offset = 8.972
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.027500, 0.015000, 0.020000, 0.022500, 0.012500, 0.002500, 0.047500
#*# 	  0.017500, -0.000000, -0.007500, -0.000000, -0.012500, -0.017500, 0.020000
#*# 	  0.020000, 0.020000, 0.002500, 0.007500, -0.007500, -0.012500, 0.010000
#*# 	  0.035000, 0.005000, -0.002500, 0.000000, -0.005000, -0.010000, 0.015000
#*# 	  0.037500, 0.015000, 0.010000, 0.007500, 0.000000, -0.005000, 0.020000
#*# 	  0.042500, 0.012500, 0.000000, 0.005000, 0.000000, 0.007500, 0.032500
#*# 	  0.030000, 0.010000, -0.010000, -0.002500, 0.002500, 0.002500, 0.025000
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 310.0
#*# min_y = 45.870000000000005
#*# max_y = 309.94
